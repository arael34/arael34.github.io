---
import BlogLayout from "../../layouts/BlogLayout.astro";
import "../../styles/index.css";
---

<BlogLayout title="Exploring a Creative Application Challenge" date="08-08-2023">
    <p class="mt-6 mb-12">
        It's the end of the summer. Unfortunately, that means I need to start thinking about internships
        for next year. One application caught my interest, which was pretty standard except for a
        question that gave a link to a coding challenge. I will (obviously) not name the company in the
        interest of preserving the integrity of the challenge, but I still want to document my attempt.
        <br /><br />
        Copy and pasting the <a href="https://0ijq1i6sp1.execute-api.us-east-1.amazonaws.com/dev" target="_blank">link</a>
        into a browser yields a JSON response of gibberish, ending with a
        double equal sign. This is a pretty good indication that the string is Base64 encoded, so I put it
        into a decoder. and behold, a introductory message was shown. The team introduced themselves
        and gave a brief overview of the challenge. It was a CTF. The goal was to find 2 or more flags,
        which the team described as seven letter dictionary words.
        <br /><br />
        My first observation is that the link ends with a query, like "?q=select whatever from whatever".
        SQL injection can likely be used. Poking around at different endpoints, I can gather that it's
        a python server running SQLite. So, I show all tables.
        <br /><br /><code>
            SELECT name FROM sqlite_master WHERE type = 'table';
        </code><br /><br /> 
        This yields two responses. <code>readme</code>, and <code>flag_220</code>. So, I select all
        contents from flag_220 table using the same SQL injection technique. This yields 4 responses.
        /browser, /hash, /exception, and /stream. I will break down the responses:
        <br /><br />
        Browser: File "/var/task/app.py", line 258, in get\n    raise InvalidUserAgent(expected_user_agent)\nMozilla/8.8 (Macintosh; Intel Mac OS X 8888_8888) AppleWebKit/888.8.88 (KHTML, like Gecko) Version/88.8.8 Safari/888.8.88<br />
        Hash: md5(flag+salt):1248d3ff9c0301add6a5015def3b731d:62f4211c2926<br />
        Exception: File "/var/task/app.py", line 322, in get\n    raise StartsWithH\n<br />
        Stream: o
        <br /><br />
        I believe these are the 4 flags. With browser, there is obviously an error with my user agent.
        Hash, is a hash. Exception is an exception. Stream is just one letter.
        <br /><br />
        Interestingly enough, exception autofills the query with hello, and the error is starts with h.
        So, I suppose I can try more queries. "Meow" yields TooFewCharacters. I try more, and here are some clues.
        <br /><br />
        It can't start with H.
        It can't contain an L
        Only letters are allowed.
        It has 7 characters.
        DoesNotSumToFortyTwoCaseInsensitive.
        <br /><br />
        It is 7 characters. I'm sure this is a flag. I keep going. The last error, I assume, means
        the positions in the alphabet have to sum to 42. I'm going to come back to this.
        <br /><br />
        My next attempt: /stream. This yields a single character, o. Hitting it again yields a different
        letter, a. I get it, ha ha. It's a stream of characters. So, I hit the endpoint until I have 7
        characters. The responses are seemingly random, so this did actually take a while. Anyway, I
        will not expose the flags here (again, for the integrity of this challenge) but I found the 7
        characters and unscrambled to find the flag. One down, one (or three) to go.
        <br /><br />
        The next one I'm closest to is /exception. I get it now. Each new exception is a clue.
        I just need to get past DoesNotSumToFortyTwoCaseInsensitive. I don't know what it means, since
        ggggggg (6 * 7) = 42. If the alphabet is 0-indexed, then ggggggm (5 * 6 + 1 * 12) = 42. Both of
        these give the same errors though. I just need one more clue, then I can brute force it.
        <br /><br />
        I just realized f is the 6th letter of the alphabet, not g. Wow. Okay, 2 down. My boss just
        told me to get back to work, so I'll go for the next 2 after I get home.
        <br /><br />
        /browser is next. I suppose I have to spoof my user agent. Easy enough, I'll just use curl.
        This was surprisingly easy, as the server gives you what it is supposed to be. 3 flags down.
        <br /><br />
        /hash is difficult. Brute forcing it seems to be in bad taste, and honestly caveman-like.
        Feel urge speak short sentences. The string is randomly salted, which makes this especially
        difficult. My first thought is that maybe there's a away to control the salt. No luck. Next,
        I cycle through each hash. There doesn't seem to be a pattern.
        <br /><br />
        The other 3 endpoints display the flag in the response. Before giving up, I need to try to think
        of a way that this endpoint could return the flag as a response. Right now, I believe it is
        generating a random salt, suffixing it onto the flag, then hashing and writing the result. How
        could this possibly return the flag? I've tried query parameters, searching for text files on the
        server, and looking for hidden SQL columns. There also doesn't seem to be a way to execute
        arbitrary code. I think I'm overthinking it. Maybe I will end up brute forcing it. I'll grab a word list from
        <a href="https://github.com/powerlanguage/word-lists/blob/master/word-list-7-letters.txt" target="_blank">here</a>
        and use a short python script to crack it.
        <br /><br />
        That somehow solved it. This flag really was in bad taste but I'm too tired to care.
        All 4 flags down and I'm done.
    </p>
</BlogLayout>
